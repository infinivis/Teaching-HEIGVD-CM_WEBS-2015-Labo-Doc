#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/api/
protocols: [HTTPS]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrive the list of the users.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve the details of a specific user.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update the details of a specific user.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a specific user.
      responses:
        204:
          body:

/issue:

  get:
    description: Retrieve the list of the issues.
    responses:
      200:
        body:
          application/json:
            example: |
             {
                "author": "Jean Bon",
                "issueType": "issueType name",
                "description": "issue's description",
                "coordinates": "24 42 13 2",
                "status": "issue's status",
                "comments":
                [{
                  "author": "Florent Plomb",
                  "date": "3w3qweq",
                  "content": "lorem ipsum"
                }]
              }

  post:
    description: Create a new issue.
    body:
      application/json:
        example: |
          {
            "author": "Jean Bon",
            "issueType": "issueType name",
            "description": "issue's description",
            "coordinates": "24 42 13 2"
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "issueType": "issueType name",
                "description": "issue's description",
                "coordinates": "24 42 13 2"
              }
  /{id}:
    post:
      description: Allow to populate random data to have a starting situation.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "name": "issueType name",
                  "description": "IssueType description"
                }

  /{id}/actions:
    post:
      description: |
        Retrieve an action on an issue by its id.
        An action is an interaction that an user can have with your app.

        ## Actions

         * solve:
         * acknowledge:
         * assign an issue:
         * reject an issue:
         * take an issue:
         * add a comment:

      body:
        application/json:
          example: |
            {
              "actionName": "solve - acknowledge - ..."
            }


/issueType:

  get:
    description: issueType resource.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "name": "issueType name",
                "description": "IssueType description"
              }



  


