#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/api/
protocols: [HTTPS]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrive the list of the users. It's possible to filter on this list with a query parameter.The parameter is 'query', and can have three differents values. 

    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }
                     
  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve the details of a specific user.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update the details of a specific user.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a specific user.
      responses:
        204:
          body:

/issues:
  # description: issue resource.
  get:
    queryParameters:
      user:
        displayName: Author
        type: string
        description: An user ID
        example: 54eb0a407e4d610e00224239
        required: false

      type:
        displayName: issueType
        type: string
        description: An issueType ID
        example: 54f33e4ae11d500e005c62a7
        required: false

      lng & lat (&rayon (optional):
        displayName: Longitude & latitude
        type: number
        description: The longitude and latitude values, of the center of the wanted area. The optional "rayon" query is to set the size of the area.
        example: lng=12&lat=10&rayon=2
        required: false

      sdStart & sdEnd:
        displayName: Solved issues
        type: string
        description: The start date, and the finish date of the wanted range of solved issues. The dates has to be in format dd-mm-yyyy or d-m-yyyy. 
        example: sdStart=01-04-2015&sdEnd=2-05-2015
        required: false

      cdStart & cdEnd:
        displayName: Solved issues
        type: string
        description: The start date, and the finish date of the wanted range of created issues, but not solved. The dates has to be in format dd-mm-yyyy or d-m-yyyy. 
        example: cdStart=01-04-2015&cdEnd=2-05-2015
        required: false

    description: Get the list of all the issues.
    responses:
      200:
        body:
          application/json:
            example: |
             {  
                "id": "ds9a7d9sa7d9sa8d,"
                "author":
                { 
                  "_id": "asd8sad97asd8ahdas987ads",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone":"+93832932",
                  "__v":0,
                  "roles":[
                    "citizen"
                  ]
                },
                "_issueType":
                { 
                  "_id": "dsa9d8sa09d809sa8das",
                  "name": "Hole",
                  "description": "A hole issue type. Holes can be everywhere.",
                  "__v":0
                  },
                "assign":{
                  "_id":"54eb0a407e4d610e00224241",
                  "firstname":"Alex",
                  "lastname":"Terieur",
                  "phone":"+12341233",
                  "--v":0,
                  "roles":[
                    "Citizen",
                    "Staff"
                  ]
                },
                "description": "There is a hole on 5th avenue!!",
                "longitude": 24,
                "latitude": 12,
                "status": "Assigned",
                "createdAt":"2015-03-01T16:49:43.985Z",
                "solvedAt":null,
                "tags":[
                  "graf",
                  "5thavenue",
                  "vandals"
                ]
                "comments":
                [{
                  "_id": "54f346f8e11d500e005c62ae",
                  "_author":
                  { 
                    "id": "28312hkhkh321",
                    "firstname": "Matthieu",
                    "lastname": "Harbich"
                  },
                  "date": "2015-03-01T17:06:00.212",
                  "content": "lorem ipsum"
                },
                {
                  "id": "32kjlkjlkjl321",
                  "_author":
                  { 
                    "_id": "54eb0a407e4d610e0022423d",
                    "firstname": "Romain",
                    "lastname": "Dutoit",
                    "phone":"+342342342",
                    "__v":0,
                    "roles":[
                      "staff"
                    ]
                  },
                  "date": "2015-03-01T17:06:00.212",
                  "content": "Hey thanks for this issue! I almost fall in!"
                }]
              }

  post:
    description: Create a new issue.
    body:
      application/json:
        example: |
          {  
                "userId":"54f3427de11d500e005c62aa",
                "issueTypeId":"54f33e4ae11d500e005c62a7",
                "description": "Issue's description. f.ex: There is a hole in the middle of the golden-gate!!!",
                "longitude": 24,
                "latitude": 12,
                "comments":[]
              }
    responses:
      201:
        body:
          application/json:
            example: |
              {  
                "id": "54f349efe11d500e005c62af",
                "author":"54eb0a407e4d610e00224244",
                "issueType":"54f33e4ae11d500e005c62a7",
                "description": "Issue's description. f.ex: There is a hole in the middle of the golden-gate!!!",
                "longitude": 24,
                "latitude": 12,
                "status": "Created",
                "createdAt":"2015-03-01T17:18:39.785Z",
                "solvedAt":null,
                "comments":[]
              }
  /{id}:
    get:
      description: Get an issue by his ID.
      responses:
        200:
          body:
            application/json:
              example: |
               {  
                  "id": "ds9a7d9sa7d9sa8d",
                  "author":
                  { 
                    "_id": "asd8sad97asd8ahdas987ads",
                    "firstname": "Romain",
                    "lastname": "Terieur",
                    "phone":"+93832932",
                    "__v":0,
                    "roles":[
                      "citizen"
                    ]
                  },
                  "_issueType":
                  { 
                    "_id": "dsa9d8sa09d809sa8das",
                    "name": "Hole",
                    "description": "A hole issue type. Holes can be everywhere.",
                    "__v":0
                    },
                  "assign":{
                    "_id":"54eb0a407e4d610e00224241",
                    "firstname":"Alex",
                    "lastname":"Terieur",
                    "phone":"+12341233",
                    "--v":0,
                    "roles":[
                      "Citizen",
                      "Staff"
                    ]
                  },
                  "description": "There is a hole on 5th avenue!!",
                  "longitude": 24,
                  "latitude": 12,
                  "status": "Assigned",
                  "createdAt":"2015-03-01T16:49:43.985Z",
                  "solvedAt":null,
                  "tags":[
                    "graf",
                    "5thavenue",
                    "vandals"
                  ],
                  "comments":
                  [{
                    "_id": "54f346f8e11d500e005c62ae",
                    "_author":
                    { 
                      "id": "28312hkhkh321",
                      "firstname": "Matthieu",
                      "lastname": "Harbich"
                    },
                    "date": "2015-03-01T17:06:00.212",
                    "content": "lorem ipsum"
                  },
                  {
                    "id": "32kjlkjlkjl321",
                    "_author":
                    { 
                      "_id": "54eb0a407e4d610e0022423d",
                      "firstname": "Romain",
                      "lastname": "Dutoit",
                      "phone":"+342342342",
                      "__v":0,
                      "roles":[
                        "staff"
                      ]
                    },
                    "date": "2015-03-01T17:06:00.212",
                    "content": "Hey thanks for this issue! I almost fall in!"
                  }]
                  } 
    put:
      description: Update the details of a specific issue.
      body:
        application/json:
          example: |
            {  
                "tags":["graffiti", "nyc", "broadway", "one more tag"]
              }

      responses: 
        200:
          body:
            application/json:
              example: |
                {  
                  "id": "ds9a7d9sa7d9sa8d",
                  "author":"54eb0a407e4d610e00224244",
                  "issueType":"54f33e4ae11d500e005c62a7",
                  "description": "Graff on boradway!!!",
                  "assign":"54eb0a407e4d610e00224241",
                  "longitude": 21,
                  "latitude": 12,
                  "status": "Assigned",
                  "tags":[
                    "graffiti",
                    "nyc",
                    "broadway",
                    "one more tag"
                  ],
                  "comments":
                  [{
                    "_id": "54f346f8e11d500e005c62ae",
                    "author":"54eb0a407e4d610e0022423d",
                    "date": "2015-03-01T17:06:00.212Z",
                    "content": "Hey thanks for this issue! I almost fall in!"
                  }]
                }
    delete:
      description: Delete a specific issue.
      responses:
        204:
          body:


  /{id}/actions:
    get:
      is: [auth: {roles: 'any'} ]
      description: |
        Retrieve the list of actions applied on as issue.
        
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":"54f352d8e11d500e005c62b1",
                  "actionType":"takeIssue",
                  "author":{
                    "_id":"54eb0a407e4d610e00224244",
                    "firstname":"Henri",
                    "lastname":"Desportes",
                    "phone":"+2312312",
                    "__v":0,
                    "roles":[
                      "Citizen"
                    ]
                  },
                  "date":"2015-03-01T17:56:40.850"
                }
             
    post:
      is: [auth: {roles: 'any'} ]
      description: |
        In a post of this uri, the only thing you can do is add a comment to a specific issue.

        ## Action
         * add a comment on an issue: `"actionType":"addComment"`
      body:
        application/json:
          example: |
            {
              "userId":"54eb0a407e4d610e00224244",
              "actionType":"addComment",
              "content":"Comment's content. F.ex: Hello! Thank you for that issue...."
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":"54f3424ae11d500e005c62a8",
                  "author":"54eb0a407e4d610e00224244",
                  "issueType":"54f33e4ae11d500e005c62a7",
                  "description":"First issue on 5th avenue!!!",
                  "longitude": 23,
                  "latitude":17,
                  "status": "taken",
                  "createdAt": "2015-03-01T16:46:02.096Z",
                  "solvedAt": null,
                  "tags":["myTag"],
                  "comments":[
                    "_id":"54f365d2afddda0e00976aea",
                    "content":"My second comment!",
                    "author":"54eb0a407e4d610e00224238",
                    "date": "2015-03-01T19:17:38.037"
                  ]
                }

    put:
      is: [auth: {roles: 'any'} ]
      description: |
        With the `put` Http verb, there is actually five possible actions. 

        ## Action
         * Solve an issue: `"actionType":"solveIssue"`
         * Acknowledge an issue: `"actionType":"acknowledge"`
         * Assign an issue: `"actionType":"assignIssue"`. Only a staff can be assigned. `"assignId":"213nlk23l"` has to be sent.
         * Reject an issue: `"actionType":"rejectIssue"`
         * Take an issue: `"actionType":"takeIssue"` 
      body:
        application/json: 
          example: |
            {
              "userId":"54eb0a407e4d610e00224238",
              "actionType":"takeIssue",
              "issueId":"54f3424ae11d500e005c62a8"
            }
            or
            {
              "userId":"54eb0a407e4d610e00224238",
              "actionType":"acknowledge",
              "issueId":"54f3424ae11d500e005c62a8"
            }
            or
            {
              "userId":"54eb0a407e4d610e00224238",
              "actionType":"solveIssue",
              "issueId":"54f3424ae11d500e005c62a8"
            }
            or
            {
              "userId":"54eb0a407e4d610e00224238",
              "actionType":"assignIssue",
              "assignId":"54eb0a407e4d610e00224238",
              "issueId":"54f3424ae11d500e005c62a8"
            }
            or
            {
              "userId":"54eb0a407e4d610e00224238",
              "actionType":"rejectIssue",
              "issueId":"54f3424ae11d500e005c62a8"
            }

      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id":"54f3424ae11d500e005c62a8",
                  "author":"54eb0a407e4d610e00224244",
                  "issueType":"54f33e4ae11d500e005c62a7",
                  "description":"First issue on 5th avenue!!!",
                  "longitude": 23,
                  "latitude":17,
                  "assign":"80sd890adsadasd3",
                  "status": "taken" or "Solved" or "Assigned" or "Acknowledged" or "Rejected",
                  "createdAt": "2015-03-01T16:46:02.096Z",
                  "solvedAt": null,
                  "tags":["myTag"],
                  "comments":[
                    "_id":"54f365d2afddda0e00976aea",
                    "content":"My second comment!",
                    "author":"54eb0a407e4d610e00224238",
                    "date": "2015-03-01T19:17:38.037"
                  ]
                }


/issueType:
  description: issueType resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve the list of the issue types.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "name": "Graffiti",
                  "description": "There is a graffiti somewhere"
                },
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "name": "Broken Street Light",
                  "description": "There is a broken streetlight somewhere"
                }
              ]
              
  post:
    description: Create a new issueType.
    body:
      application/json:
        example: |
          {
            "name": "Broken sidewalk",
            "description": "There is a broken sidewalk in the city"
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "name": "Broken sidewalk",
                "description": "There is a broken sidewalk in the city",
                }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve the details of a specific issueType.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "name": "Broken sidewalk",
                  "description": "There is a broken sidewalk in the city"
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update the details of a specific issueType.
      body:
        application/json:
          example: |
            {
              "name": "Broken sidewalk",
              "description": "There is a broken sidewalk in the city",
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "name": "Broken sidewalk",
                  "description": "There is a broken sidewalk in the city"
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a specific issueType.
      responses:
        204:
          body:


    
        

